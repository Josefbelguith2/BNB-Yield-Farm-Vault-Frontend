/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type AdminAccessSet = ContractEventLog<{
  _admin: string;
  _enabled: boolean;
  0: string;
  1: boolean;
}>;
export type AmmAdded = ContractEventLog<{
  router: string;
  farming: string;
  farmingPId: string;
  rewardToken: string;
  lpToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type AmmDeposit = ContractEventLog<{
  user: string;
  router: string;
  pId: string;
  liquidityBnb: string;
  liquidityToken: string;
  lpAmount: string;
  excess: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
}>;
export type AmmStatusSet = ContractEventLog<{
  pId: string;
  isActive: boolean;
  0: string;
  1: boolean;
}>;
export type AmmWithdraw = ContractEventLog<{
  user: string;
  router: string;
  pId: string;
  lpAmount: string;
  bnbFromLiq: string;
  tokenFromLiq: string;
  rewards: string;
  bnbFromToken: string;
  bnbFromRewards: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
  5: string;
  6: string;
  7: string;
  8: string;
}>;
export type Deployed = ContractEventLog<{
  deployer: string;
  0: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  amount: string;
  fee: string;
  swapBnb: string;
  swapToken: string;
  0: string;
  1: string;
  2: string;
  3: string;
  4: string;
}>;
export type FeesCollected = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type Paused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Recovered = ContractEventLog<{
  tokenAddress: string;
  tokenAmount: string;
  0: string;
  1: string;
}>;
export type Unpaused = ContractEventLog<{
  account: string;
  0: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  amount: string;
  0: string;
  1: string;
}>;

export interface Vault extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Vault;
  clone(): Vault;
  methods: {
    activeAmms(): NonPayableTransactionObject<string>;

    addAmm(
      _router: string,
      _farming: string,
      _farmingPId: number | string | BN,
      _rewardToken: string
    ): NonPayableTransactionObject<void>;

    admins(arg0: string): NonPayableTransactionObject<boolean>;

    ammBalances(
      arg0: number | string | BN,
      arg1: string
    ): NonPayableTransactionObject<{
      user: string;
      ammId: string;
      lpAmount: string;
      excess: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    amms(arg0: number | string | BN): NonPayableTransactionObject<{
      router: string;
      id: string;
      farming: string;
      farmingPId: string;
      rewardToken: string;
      lpToken: string;
      isActive: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
    }>;

    checkExists(_router: string): NonPayableTransactionObject<boolean>;

    collectFees(): NonPayableTransactionObject<void>;

    deposit(_slippage: number | string | BN): PayableTransactionObject<void>;

    feePercent(): NonPayableTransactionObject<string>;

    getAmmsLength(): NonPayableTransactionObject<string>;

    getEarnedRewards(_account: string): NonPayableTransactionObject<string>;

    isAdmin(admin: string): NonPayableTransactionObject<boolean>;

    owner(): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    paused(): NonPayableTransactionObject<boolean>;

    recoverERC20(
      tokenAddress: string,
      tokenAmount: number | string | BN
    ): NonPayableTransactionObject<void>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setAdmin(
      admin: string,
      enabled: boolean
    ): NonPayableTransactionObject<void>;

    setAmmStatus(
      _ammId: number | string | BN,
      _status: boolean
    ): NonPayableTransactionObject<void>;

    setSwapAmm(_id: number | string | BN): NonPayableTransactionObject<void>;

    swapAmmId(): NonPayableTransactionObject<string>;

    token(): NonPayableTransactionObject<string>;

    totalFees(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    unpause(): NonPayableTransactionObject<void>;

    userAmms(
      arg0: string,
      arg1: number | string | BN
    ): NonPayableTransactionObject<boolean>;

    userDeposits(arg0: string): NonPayableTransactionObject<string>;

    wToken(): NonPayableTransactionObject<string>;

    withdraw(
      _slippage: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    AdminAccessSet(cb?: Callback<AdminAccessSet>): EventEmitter;
    AdminAccessSet(
      options?: EventOptions,
      cb?: Callback<AdminAccessSet>
    ): EventEmitter;

    AmmAdded(cb?: Callback<AmmAdded>): EventEmitter;
    AmmAdded(options?: EventOptions, cb?: Callback<AmmAdded>): EventEmitter;

    AmmDeposit(cb?: Callback<AmmDeposit>): EventEmitter;
    AmmDeposit(options?: EventOptions, cb?: Callback<AmmDeposit>): EventEmitter;

    AmmStatusSet(cb?: Callback<AmmStatusSet>): EventEmitter;
    AmmStatusSet(
      options?: EventOptions,
      cb?: Callback<AmmStatusSet>
    ): EventEmitter;

    AmmWithdraw(cb?: Callback<AmmWithdraw>): EventEmitter;
    AmmWithdraw(
      options?: EventOptions,
      cb?: Callback<AmmWithdraw>
    ): EventEmitter;

    Deployed(cb?: Callback<Deployed>): EventEmitter;
    Deployed(options?: EventOptions, cb?: Callback<Deployed>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    FeesCollected(cb?: Callback<FeesCollected>): EventEmitter;
    FeesCollected(
      options?: EventOptions,
      cb?: Callback<FeesCollected>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    Paused(cb?: Callback<Paused>): EventEmitter;
    Paused(options?: EventOptions, cb?: Callback<Paused>): EventEmitter;

    Recovered(cb?: Callback<Recovered>): EventEmitter;
    Recovered(options?: EventOptions, cb?: Callback<Recovered>): EventEmitter;

    Unpaused(cb?: Callback<Unpaused>): EventEmitter;
    Unpaused(options?: EventOptions, cb?: Callback<Unpaused>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "AdminAccessSet", cb: Callback<AdminAccessSet>): void;
  once(
    event: "AdminAccessSet",
    options: EventOptions,
    cb: Callback<AdminAccessSet>
  ): void;

  once(event: "AmmAdded", cb: Callback<AmmAdded>): void;
  once(event: "AmmAdded", options: EventOptions, cb: Callback<AmmAdded>): void;

  once(event: "AmmDeposit", cb: Callback<AmmDeposit>): void;
  once(
    event: "AmmDeposit",
    options: EventOptions,
    cb: Callback<AmmDeposit>
  ): void;

  once(event: "AmmStatusSet", cb: Callback<AmmStatusSet>): void;
  once(
    event: "AmmStatusSet",
    options: EventOptions,
    cb: Callback<AmmStatusSet>
  ): void;

  once(event: "AmmWithdraw", cb: Callback<AmmWithdraw>): void;
  once(
    event: "AmmWithdraw",
    options: EventOptions,
    cb: Callback<AmmWithdraw>
  ): void;

  once(event: "Deployed", cb: Callback<Deployed>): void;
  once(event: "Deployed", options: EventOptions, cb: Callback<Deployed>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "FeesCollected", cb: Callback<FeesCollected>): void;
  once(
    event: "FeesCollected",
    options: EventOptions,
    cb: Callback<FeesCollected>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "Paused", cb: Callback<Paused>): void;
  once(event: "Paused", options: EventOptions, cb: Callback<Paused>): void;

  once(event: "Recovered", cb: Callback<Recovered>): void;
  once(
    event: "Recovered",
    options: EventOptions,
    cb: Callback<Recovered>
  ): void;

  once(event: "Unpaused", cb: Callback<Unpaused>): void;
  once(event: "Unpaused", options: EventOptions, cb: Callback<Unpaused>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
